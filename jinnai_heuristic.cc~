#include "jinnai_heuristic.h"

#include "globals.h"
#include "option_parser.h"
#include "plugin.h"
#include "state.h"


// For debugging.
#include <iostream>



JinnaiHeuristic::JinnaiHeuristic(const Options &opts)
    : Heuristic(opts) {
}

JinnaiHeuristic::~JinnaiHeuristic() {
}

void JinnaiHeuristic::initialize() {
    cout << "Initializing jinnai heuristic..." << endl;
}

// TODO: Make some AMAZING heuristic
int JinnaiHeuristic::compute_heuristic(const State &state) {
    int unsatisfied_goal_count = 0;
    for (int i = 0; i < g_goal.size(); i++) {
        int var = g_goal[i].first, value = g_goal[i].second;
        if (state[var] != value)
            unsatisfied_goal_count++;
    }

    std::cout << "Facts:" << std::endl;
    for (vector<vector<string> >::iterator iter = g_fact_names.begin();
	 iter != g_fact_names.end(); ++iter) {
      for (vector<string>::iterator i = iter->begin();
	   i != iter->end(); ++i) {
	std::cout << *i << ", ";
       }      
    }
    std::cout << std::endl << std::endl;
    
    return unsatisfied_goal_count;
}

static Heuristic *_parse(OptionParser &parser) {
    parser.document_synopsis("Jinnai heuristic", "");
    parser.document_language_support("action costs", "ignored by design");
    parser.document_language_support("conditional_effects", "supported");
    parser.document_language_support("axioms", "supported");
    parser.document_property("admissible", "no");
    parser.document_property("consistent", "no");
    parser.document_property("safe", "yes");
    parser.document_property("preferred operators", "no");

    Heuristic::add_options_to_parser(parser);
    Options opts = parser.parse();
    if (parser.dry_run())
        return 0;
    else
        return new JinnaiHeuristic(opts);
}


static Plugin<Heuristic> _plugin("jinnai", _parse);
