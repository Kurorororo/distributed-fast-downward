#! /bin/bash

set -e

BASEDIR="$(dirname "$0")"

function die {
    echo "$@" 1>&2
    exit 1
}

function usage {
    die "usage: $(basename "$0") [DOMAIN_FILE] PROBLEM_FILE SEARCH_OPTION ..."
}

# Paths to planner components
TRANSLATE="$BASEDIR/sym-translate/translate.py"
#TRANSLATE="$BASEDIR/translate/translate.py"
PREPROCESS="$BASEDIR/preprocess/sym-preprocess"
#PREPROCESS="$BASEDIR/preprocess/preprocess"
#SEARCH="$BASEDIR/search/downward"
#SEARCH="$BASEDIR/search/downward-1"
SEARCH="$BASEDIR/search/downward-1-debug"
INSTANCE=`echo $1 | sed -e "s/\//--/g"`

# Need to explicitly ask for GNU time (from MacPorts) on Mac OS X.
if [[ "$(uname)" == "Darwin" ]]; then
    TIME="gtime"
    if ! which $TIME >/dev/null; then
        die "$TIME must be installed on Mac OSX (from MacPorts, perhaps) for this to work"
    fi
else
    TIME="command time"
fi

TIME="$TIME --output=elapsed.time --format=%S\n%U\n"

if [[ "$#" < 2 ]]; then
    usage
fi

echo "1. Running translator"
if [[ -e "$2" ]]; then
    echo "Second argument is a file name: use two translator arguments."
    $TIME "$TRANSLATE" "$1" "$2"
    shift 2
else
    echo "Second argument is not a file name: auto-detect domain file."
    $TIME "$TRANSLATE" "$1"
    shift
fi
echo

echo "2. Running preprocessor"
$TIME --append "$PREPROCESS" < output.sas
echo

ismpi=0
threads=1
re='^[0-9]+$'
if [[ ${@: -1} =~ $re ]] ; then
    threads=${@: -1}
    ismpi=1
fi
echo "threads=$threads"


if [[ $ismpi -eq 0 ]] ; then
    echo "3. Running search"
    "$SEARCH" output "$@"
    echo
else
    echo "3. Running search MPI"
    MPISEARCH="$BASEDIR/mpi_search"
    length=$(($#-1))
    array=${@:1:$length}
    echo "array is $array"

#   mpirun -np $threads "$MPISEARCH"  "$BASEDIR" "$SEARCH" "output" "$array"

#    mpirun -np $threads "$MPISEARCH"  "$BASEDIR" "$SEARCH" "output" "$array"
    if [ $threads -gt 1 ]
    then
	echo "t=$threads"
	t=`expr $threads - 1`
	for i in `seq 0 $t`
	do
	    echo "$INSTANCE.$i"
	    if [ -f $INSTANCE.$i ]
	    then
		rm $INSTANCE.$i
	    fi 
	done
	mpirun -np $threads -outfile-pattern "$INSTANCE.%r" "$MPISEARCH"  "$BASEDIR" "$SEARCH" "output" "$array"
	if [ -f $INSTANCE.o ]
	then
	    rm $INSTANCE.o
	fi 
	for i in `seq 0 $t`
	do
	    echo "----- $i --------------" >> $INSTANCE.o
	    cat $INSTANCE.$i >> $INSTANCE.o
	done
	cat $INSTANCE.o    
    else
	mpirun -np $threads "$MPISEARCH"  "$BASEDIR" "$SEARCH" "output" "$array"
    fi

#    mpirun -np $threads --mca btl self,vader "$MPISEARCH" "$BASEDIR" "$SEARCH" "output" "$array"

#    mpirun -np $threads --mca btl self,tcp "$MPISEARCH" "$BASEDIR" "$SEARCH" "output" "$array"

#    "$SEARCH" < output ${array}
    echo
fi
#mpirun -np $threads 
